--   AsmBASIC - a BASIC compile and go system written in assembly language
--   Copyright (C) 2022  Ekkehard Morgenstern
--
--   This program is free software: you can redistribute it and/or modify
--   it under the terms of the GNU General Public License as published by
--   the Free Software Foundation, either version 3 of the License, or
--   (at your option) any later version.
--
--   This program is distributed in the hope that it will be useful,
--   but WITHOUT ANY WARRANTY; without even the implied warranty of
--   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--   GNU General Public License for more details.
--
--   You should have received a copy of the GNU General Public License
--   along with this program.  If not, see <https://www.gnu.org/licenses/>.
--
--   NOTE: Programs created with AsmBASIC do not fall under this license.
--
--   CONTACT INFO:
--       E-Mail: ekkehard@ekkehardmorgenstern.de
--       Mail: Ekkehard Morgenstern, Mozartstr. 1, D-76744 Woerth am Rhein,
--             Germany, Europe

TOKEN p-exponent := /P[+-][0-9]+/ .

TOKEN hex-exponent := /G[+-][0-9A-F]+/ | p-exponent .
TOKEN dec-exponent := /E[+-][0-9]+/ | p-exponent .
TOKEN oct-exponent := /E[+-][0-7]+/ | p-exponent .
TOKEN bin-exponent := /E[+-][0-1]+/ | p-exponent .

TOKEN hex-number := '&H' /([0-9A-F]+)?(\.[0-9A-F]+)?/ [hex-exponent] .
TOKEN dec-number := ['&D'] /([0-9]+)?(\.[0-9]+)?/ [dec-exponent] .
TOKEN oct-number := '&O' /([0-7]+)?(\.[0-7]+)?/ [oct-exponent] .
TOKEN bin-number := '&B' /([0-1]+)?(\.[0-1]+)?/ [bin-exponent] .

TOKEN number := hex-number | dec-number | oct-number | bin-number .

TOKEN ident-char     := /[^"<=>*/+-^,;:)$%&!#(]/ .
TOKEN num-sigil      := /[%&!#]/ .
TOKEN str-sigil      := /[$]/ .
TOKEN ident-stem     := ident-char { ident-char } .
TOKEN num-ident      := ident-stem [ num-sigil ] .
TOKEN str-ident      := ident-stem [ str-sigil ] .
TOKEN num-func-ident := num-ident '(' .
TOKEN str-func-ident := str-ident '(' .
-- NOTE that identifiers that are identical to a built-in keyword resolve
--      as that keyword.

TOKEN string-literal := /"[^"]*"/ .

TOKEN num-func-kw := 'ABS(' | 'ASC(' | 'ATAN(' | 'ATN(' | 'CEIL(' | 'COS(' |
                     'EXP(' | 'FLOOR(' | 'INT(' | 'LG(' | 'LN(' | 'LOG10(' |
                     'LOG2(' | 'LOGN(' | 'PEEK(' | 'PEEKB(' | 'PEEKD(' |
                     'PEEKF(' | 'PEEKL(' | 'PEEKQ(' | 'PEEKW(' | 'SIN(' |
                     'SQR(' | 'SQRT(' | 'UNI(' .

TOKEN str-func-kw := 'AT$(' | 'BIN$(' | 'DEC$(' | 'HEX$(' | 'HTAB$(' | 'LEFT$('
                     | 'MID$(' | 'OCT$(' | 'RIGHT$(' | 'STR$(' | 'UNI$(' |
                     'VTAB$(' .

TOKEN predef-num-var := 'ERL' | 'RND' | 'TI' .
TOKEN predef-str-var := 'DATE$' | 'DATETIME$' | 'ERR$' | 'TI$' | 'TIME$' .

TOKEN gosub := 'GO' 'SUB' | 'GOSUB' .
TOKEN goto := 'GO' 'TO' | 'GOTO' .
TOKEN gosub-or-goto := gosub | goto .
TOKEN and-oper := 'AND' | 'NAND' .
TOKEN or-oper := 'OR' | 'NOR' | 'XOR' | 'XNOR' .
TOKEN log-oper := and-oper | or-oper .
TOKEN imp-oper := 'IMP' | 'NIMP' .
TOKEN eqv-oper := 'EQV' | 'NEQV' .
TOKEN imp-or-eqv-oper := imp-oper | eqv-oper .
TOKEN not-oper := 'NOT' .
TOKEN shift-oper := 'ASL' | 'ASR' | 'SHL' | 'SHR' .
TOKEN mul-oper := '*' | '**' | '^' .
TOKEN div-oper := '/' .
TOKEN mul-or-div-oper := mul-oper | div-oper .
TOKEN add-oper := '+' .
TOKEN sub-oper := '-' .
TOKEN add-or-sub-oper := add-oper | sub-oper .
TOKEN cmp-oper := '=' | '<>' | '><' | '>=' | '<=' | '<' | '>' .
TOKEN chan := '#' ( number | num-ident  ) .

TOKEN jump-target := number | num-ident .
TOKEN loop-variable := num-ident .
TOKEN loop-or-jump := loop-variable | jump-target .
TOKEN map-variable := num-ident | str-ident .
TOKEN next-variable := map-variable .

jump-target-list := jump-target { ',' jump-target } .
next-variable-list := next-variable { ',' next-variable } .
chan-list := chan { ',' chan } .

num-array-ident := num-func-ident ')' .
str-array-ident := str-func-ident ')' .
array-ident := num-array-ident | str-array-ident .
array-ident-list := array-ident { ',' array-ident } .

identifier := num-ident | str-ident | num-array-ident | str-array-ident .
identifier-list := identifier { ',' identifier } .

num-func-ap := ( num-func-kw | num-func-ident ) expr-list ')' .
str-func-ap := ( str-func-kw | str-func-ident ) expr-list ')' .
func-ap     := num-func-ap | str-func-ap .

num-var-ref := num-ident | predef-num-var | num-func-ap .
str-var-ref := str-ident | predef-str-var | str-func-ap .

num-base-expr  := number | num-var-ref | '(' num-expr ')' .
num-unary-expr := [ not-oper | add-oper | sub-oper ] num-base-expr .
num-mul-expr   := num-unary-expr { mul-or-div-oper num-unary-expr } .
num-add-expr   := num-mul-expr { add-or-sub-oper num-mul-expr } .
num-shf-expr   := num-add-expr [ shift-oper num-add-expr ] .
pure-num-expr  := num-shf-expr .
num-log-expr   := pure-num-expr { log-oper pure-num-expr } .
num-expr       := num-log-expr .
-- NOTE a slight complication here: If a conditional expression (see below)
--      contains a logical expression, it must be in parenthesis.
--      Also, conditional expressions are only allowed in IF statements.
num-expr-list  := num-expr { ',' num-expr } .

str-base-expr := string-literal | str-var-ref .
str-add-expr  := str-base-expr { add-oper str-base-expr } .
str-expr      := str-add-expr .
-- str-expr-list := str-expr { ',' str-expr } .

num-cmp-expr := pure-num-expr cmp-oper pure-num-expr .
str-cmp-expr := str-expr cmp-oper str-expr .
cmp-expr     := num-cmp-expr | str-cmp-expr .
imp-expr     := cmp-expr [ imp-or-eqv-oper cmp-expr ] .
and-expr     := imp-expr { and-oper imp-expr } .
or-expr      := and-expr { or-oper and-expr } .
cond-expr    := or-expr .

expr        := num-expr | str-expr .
expr-list   := expr { ',' expr } .

-- program/immediate mode statements:

break-stmt := 'BRK' .
call-stmt := 'CALL' func-ap .
catalog-stmt := ( 'CATALOG' | 'FILES' ) [ str-expr ] .
def-char-stmt := 'DEF' 'CHAR' num-expr-list .
clear-stmt := 'CLEAR' .
close-stmt := 'CLOSE' [ chan-list ] .
cls-stmt := 'CLS' [ num-expr ] .
color-stmt := 'COLOR' num-expr [ ',' num-expr ] .
delete-stmt := 'DELETE' number [ '-' number ] .

dimension := num-expr | 'DYNAMIC' | 'ASSOC' .
dimension-list := dimension { ',' dimension } .
num-dim-expr := num-func-ident dimension-list ')' .
str-dim-expr := str-func-ident dimension-list ')' .
dim-expr := num-dim-expr | str-dim-expr .
dim-list := dim-expr { ',' dim-expr } .
dim-stmt := 'DIM' dim-list | 'ERASE' array-ident-list .

do-stmt := 'DO' [ ( 'WHILE' | 'UNTIL' ) cond-expr ] .

for-stmt := 'FOR' loop-variable '=' num-expr ( 'TO' | 'DOWNTO' ) num-expr
                [ 'STEP' num-expr ] |
            ( 'FOR' 'EACH' | 'FOREACH' ) map-variable [ ',' map-variable ]
                 'IN' array-ident |
            ( 'FOR' 'EVER' | 'FOREVER' ) |
            'REPEAT' |
            ( 'WHILE' | 'UNTIL' ) cond-expr .

loop-stmt := 'LOOP' [ ( 'WHILE' | 'UNTIL' ) cond-expr ] |
             ( 'WHILE' | 'UNTIL' ) cond-expr |
             'NEXT' [ next-variable-list ] |
             'EXIT' [ loop-or-jump ] |
             'WEND' .

goto-stmt := gosub-or-goto jump-target .

if-stmt := ( 'IF' | 'UNLESS' ) cond-expr 'THEN' [ gosub-or-goto ] jump-target
           [ 'ELSE' [ gosub-or-goto ] jump-target ] |
           ( 'IF' | 'UNLESS' ) cond-expr | 'END' ( 'IF' | 'UNLESS' ) .

any-mode-stmt := break-stmt | call-stmt | catalog-stmt | def-char-stmt |
                 clear-stmt | close-stmt | cls-stmt | color-stmt |
                 delete-stmt | dim-stmt | do-stmt | for-stmt | loop-stmt |
                 goto-stmt | if-stmt .

-- program mode ONLY statements:

after-or-every-stmt := ( 'AFTER' | 'EVERY' ) num-expr goto-stmt .
again-or-exit-stmt := ( 'AGAIN' | 'EXIT' ) [ loop-or-jump ] .
chain-stmt := 'CHAIN' [ 'MERGE' ] str-expr .

data-item := number | string-literal .
data-item-list := data-item { ',' data-item } .
data-stmt := 'DATA' data-item-list .

num-fn-decl := num-func-ident identifier-list ')' '=' num-expr .
str-fn-decl := str-func-ident identifier-list ')' '=' str-expr .
fn-decl     := num-fn-decl | str-fn-decl .
def-fn-stmt := 'DEF' 'FN' fn-decl .

num-func-decl := num-func-ident identifier-list ')' .
str-func-decl := str-func-ident identifier-list ')' .
func-decl     := num-func-decl | str-func-decl .

func-stmt := ( 'FUNC' | 'FUNCTION' | 'SUB' | 'PROC' | 'PROCEDURE' ) func-decl .
end-stmt := 'END' [ 'FUNC' | 'FUNCTION' | 'SUB' | 'PROC' | 'PROCEDURE' ] .
onerr-stmt := 'ON' 'ERROR' ( 'OFF' | goto-stmt ) .
ongoto-stmt := 'ON' expr gosub-or-goto jump-target-list .

program-only-stmt := after-or-every-stmt | again-or-exit-stmt | chain-stmt |
    data-stmt | def-fn-stmt | func-stmt | end-stmt | onerr-stmt | ongoto-stmt .

-- direct mode ONLY statements:

auto-stmt := 'AUTO' [ number [ ',' number ] ] .
cont-stmt := 'CONT' [ jump-target ] .
edit-stmt := 'EDIT' dec-number .



direct-only-stmt := auto-stmt | cont-stmt | edit-stmt .

-- combined modes

program-stmt := program-only-stmt | any-mode-stmt .
program-line := dec-number [ program-stmt { ':' program-stmt } ] .

direct-stmt := direct-only-stmt | any-mode-stmt .

direct-line := direct-stmt { ':' direct-stmt } | program-line .
