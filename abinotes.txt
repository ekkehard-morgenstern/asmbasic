=========
ABI Notes
=========

cf. System V ABI description for x86-84 (Date retrieved: 2022-09-12):
       https://gitlab.com/x86-psABIs/x86-64-ABI

  p. 20f of PDF version (paraphrased):
  - registers RBP, RBX, R12..R15 belong to the caller and hence must be saved
  - EMMS/FEMMS must be used to return to FPU mode after using MMX
  - DF must be clear upon procedure entry and exit
  - RSP must be 16-byte aligned for regular calls (before the CALL instruction
    is issued).
  - AL must contain the number of variable arguments in vector registers

  pp. 25, 143 of PDF version:
  - register parameters are passed in RDI, RSI, RDX, RCX/R10(syscall), R8, R9,
    or XMM0..XMM7, all others are passed on the stack
  - Linux syscalls destroy registers RCX and R11, and the result is in RAX,
    which is -errno.
  - The Linux syscall index is passed in RAX, and parameters are never passed
    on the stack.

cf. /usr/include/x86_64-linux-gnu/asm/unistd_64.h for table of syscalls

for TLS in NASM (see NASM manual):
  - sections .tbss and .tdata
  - linker creates only _offsets_ into the TLS table accessible with FS
  - use [rel symbol wrt ..gottpoff] to access the offset
  - use [fs:offset] to access the data
  - link with pthread library (option -pthread on GCC)
NOTE: Shelved, b/c FS is zero on main() call, how to set FS register correctly?
      Black magic & Voodoo!
